image: nexus.itecos.com:5000/java-app:15

variables:
  GIT_DEPTH: 40
  PROD_NAMESPACE: "k24cluster"
  # конфиг kubectl, завернутый в base64, внутрь которого встроены все сертификаты и ключи
  KUBE_CONFIG: 
  GIT_BRANCH: ${CI_COMMIT_BRANCH}
  GIT_TAG: ${CI_COMMIT_TAG}

stages:
  - build
  - deploy

.docker_support:
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
  services:
    - name: docker:18.09.7-dind
      entrypoint:
        - /bin/sh
        - -c
        - dockerd-entrypoint.sh --insecure-registry nexus.itecos.com:5001 --insecure-registry registry.sel.itecos.com:5001 || exit

.install_kubectl: &install_kubectl
  - mkdir -p /root/.kube
  - echo -n $KUBE_CONFIG | base64 -d > /root/.kube/config

orcTelegramBot:build:
  image: nexus.itecos.com:5000/sbt-docker-build-13:0.1
  stage: build
  extends: .docker_support
  before_script:
    - git branch
  script:
    - sbt "project orcTelegramBot" docker:publish

orcTelegramBot:deploy:
  image: nexus.itecos.com:5000/google/cloud-sdk:284.0.0
  when: manual
  stage: deploy
  extends: .docker_support
  before_script:
    - *install_kubectl
    - kubectl config use-context sel
  script:
    - docker pull nexus.itecos.com:5001/kvp24/orc-telegram-bot:${GIT_TAG}
    - docker tag nexus.itecos.com:5001/kvp24/orc-telegram-bot:${GIT_TAG} registry.sel.itecos.com:5000/kvp24/orc-telegram-bot:${GIT_TAG}
    - docker push registry.sel.itecos.com:5000/kvp24/orc-telegram-bot:${GIT_TAG}
    - kubectl -n ${PROD_NAMESPACE} set image deployment/orc-telegram-bot orc-telegram-bot=registry.sel.itecos.com:5000/kvp24/orc-telegram-bot:${GIT_TAG}